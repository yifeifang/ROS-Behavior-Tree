#! /usr/bin/env python


import rospy

import actionlib

import behavior_tree_core.msg

from random import randint

from sensor_msgs.msg import LaserScan


class BTAction(object):
  # create messages that are used to publish feedback/result
  _feedback = behavior_tree_core.msg.BTFeedback()
  _result   = behavior_tree_core.msg.BTResult()

  def __init__(self, name):
    self._action_name = name
    self._as = actionlib.SimpleActionServer(self._action_name, behavior_tree_core.msg.BTAction, execute_cb=self.execute_cb, auto_start = False)
    self._as.start()
    self.counter = 0
    self.sub = rospy.Subscriber("base_scan", LaserScan, self.update_obstacle)
    self.current_distance = 0
    
  def update_obstacle(self, data):
    self.current_distance = data.ranges[330]

  def execute_cb(self, goal):
    
    # publish info to the console for the user
    rospy.loginfo('Checking Condition Door in view')
    
    if self.current_distance < 1.2:
      rospy.loginfo('Obstacle encountered')
      self.set_status('SUCCESS')
    else:
      rospy.loginfo('Route clear')
      self.set_status('FAILURE')

    self.counter += 1

    

  def set_status(self,status):
      if status == 'SUCCESS':
        self._feedback.status = 1
        self._result.status = self._feedback.status
        rospy.loginfo('Action %s: Succeeded' % self._action_name)
        self._as.set_succeeded(self._result)
      elif status == 'FAILURE':
        self._feedback.status = 2
        self._result.status = self._feedback.status
        rospy.loginfo('Action %s: Failed' % self._action_name)
        self._as.set_succeeded(self._result)
      else:
        rospy.logerr('Action %s: has a wrong return status' % self._action_name)



if __name__ == '__main__':
  rospy.init_node('obstacle_encounter')
  BTAction(rospy.get_name())
  rospy.spin()
